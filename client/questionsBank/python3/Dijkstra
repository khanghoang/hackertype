import heapq
import collections

class Graph:
    def __init__(self):
        self.edges = collections.defaultdict(list)

    def add_edge(self, u, v, weight):
        self.edges[u].append((v, weight))

def dijkstra(graph, start):
    # Initialize distances and priority queue
    distances = {node: float('inf') for node in graph.edges}
    distances[start] = 0
    min_heap = [(0, start)]  # (distance, node)

    while min_heap:
        current_distance, current_node = heapq.heappop(min_heap)

        # If a shorter path is already found, skip this node
        if current_distance > distances[current_node]:
            continue

        # Update neighbors
        for neighbor, weight in graph.edges.get(current_node, []):
            distance = current_distance + weight

            # Only consider this path if it's better
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(min_heap, (distance, neighbor))

    return distances
