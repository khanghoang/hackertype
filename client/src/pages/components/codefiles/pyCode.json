[[{"id":".null-ls_226301_15. 3Sum.py","code":"class Solution:\n    def threeSum(self, nums):\n        res = []\n        nums.sort()\n\n        for i, a in enumerate(nums):\n\n            if i>0 and nums[i] == nums[i-1]:\n                continue\n\n            l, r = i+1, len(nums)-1\n            while l<r:\n                total = a + nums[l] + nums[r]\n\n                if total > 0:\n                    r = r-1\n                elif total < 0:\n                    l = l+1\n                else:\n                    res.append([a, nums[l], nums[r]])\n                    r = r-1\n                    l = l+1\n\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n\n        return res\n"}],[{"id":"36. Valid Sudoku","code":"class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        rows = defaultdict(list)\n        cols = defaultdict(list)\n        rects = defaultdict(list)\n\n        R = len(board)\n        C = len(board[0])\n\n        for i in range(R):\n            for j in range(C):\n                if board[i][j] == \".\":\n                    continue\n\n                val = board[i][j]\n                if val in rows[i]:\n                    return False\n                rows[i].append(val)\n\n                if val in cols[j]:\n                    return False\n\n                cols[j].append(val)\n\n                if val in cols[(i//3, j//3)]:\n                    return False\n\n                cols[(i//3, j//3)].append(val)\n\n        return True\n"}],[{"id":"15. 3Sum","code":"class Solution:\n    def threeSum(self, nums):\n        res = []\n        nums.sort()\n\n        for i, a in enumerate(nums):\n\n            if i>0 and nums[i] == nums[i-1]:\n                continue\n\n            l, r = i+1, len(nums)-1\n            while l<r:\n                total = a + nums[l] + nums[r]\n\n                if total > 0:\n                    r = r-1\n                elif total < 0:\n                    l = l+1\n                else:\n                    res.append([a, nums[l], nums[r]])\n                    r = r-1\n                    l = l+1\n\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n\n        return res\n"}]]